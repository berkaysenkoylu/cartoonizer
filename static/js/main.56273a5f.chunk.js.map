{"version":3,"sources":["containers/DragAndDrop/DragAndDrop.module.scss","App.module.scss","components/Upload/File.module.scss","components/UI/Backdrop/Backdrop.module.scss","components/UI/Button/Button.module.scss","components/UI/Spinner/Spinner.js","components/ShowCase/ShowCase.js","components/UI/Button/Button.js","components/Upload/File.js","containers/DragAndDrop/DragAndDrop.js","components/FileUpload/FileUpload.js","components/UI/Backdrop/Backdrop.js","components/ErrorDialogue/ErrorDialogue.js","App.js","serviceWorker.js","index.js","components/ShowCase/ShowCase.module.scss","components/UI/Spinner/Spinner.module.scss","components/FileUpload/FileUpload.module.scss","components/ErrorDialogue/ErrorDialogue.module.scss"],"names":["module","exports","Spinner","props","className","classes","Circular","viewBox","Stroke","cx","cy","r","fill","strokeWidth","ShowCase","pageContent","loading","uploadedImage","cartoonizedImage","ImageContainer","src","alt","Image","style","textAlign","Button","classList","ButtonMedium","ButtonPrimary","type","ButtonSmall","join","onClick","clicked","children","File","fileInput","useRef","droppedFile","current","files","name","id","onChange","event","selectedFile","target","ref","Input","e","preventDefault","click","MIME_TYPE_MAP","DragAndDrop","dropRef","createRef","checkMimeType","file","resetState","setState","DropContainer","content","contentClassList","ContentText","dataTransferFiles","undefined","selectedFileName","dragInHandler","stopPropagation","dragCounter","prevState","concat","DropContainerEnter","dataTransfer","items","length","newList","ValidFileType","InvalidFileType","dragOutHandler","filter","c","state","dragOverHandler","dropHandler","dropHandle","fileName","fileSelectHandler","fileSelect","div","this","addEventListener","removeEventListener","prevProps","pageContentTemplate","FileSelect","Component","BACKEND_URL","FileUpload","useState","setFile","onSelectFile","input_file","FileUploadHeader","onSubmit","formData","FormData","append","axios","post","headers","then","response","data","status","error","message","cartoonizeImage","path","cartoon_path","catch","console","log","Form","Backdrop","ReactDOM","createPortal","show","document","getElementById","ErrorDialogue","ErrorDialogueContainer","errorMessage","ErrorDialogueCallToAction","closed","App","handleError","setHandleError","isLoading","setIsLoading","setUploadedImage","showcase","setShowcase","AppHeader","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56273a5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropContainer\":\"DragAndDrop_DropContainer__1YX85\",\"DropContainerEnter\":\"DragAndDrop_DropContainerEnter__NOrkB\",\"FileSelect\":\"DragAndDrop_FileSelect__2eZYD\",\"ContentText\":\"DragAndDrop_ContentText__3E_4K\",\"InvalidFileType\":\"DragAndDrop_InvalidFileType__3yNuW\",\"ValidFileType\":\"DragAndDrop_ValidFileType__2DXiS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2vky1\",\"AppHeader\":\"App_AppHeader__2BV_6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"File_Input__4-oIb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3Dstx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__RG8Aw\",\"ButtonPrimary\":\"Button_ButtonPrimary__1q0ks\",\"ButtonSmall\":\"Button_ButtonSmall__D6J-Q\",\"ButtonMedium\":\"Button_ButtonMedium__2EuZ7\"};","import React from 'react';\r\n\r\nimport classes from './Spinner.module.scss';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className={classes.Spinner}>\r\n            <svg className={classes.Circular} viewBox=\"25 25 50 50\">\r\n                <circle className={classes.Stroke} cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" strokeWidth={props.strokeWidth} />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nimport classes from './ShowCase.module.scss';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst ShowCase = (props) => {\r\n\r\n    let pageContent = null;\r\n    if(props.loading) {\r\n        pageContent = <Spinner strokeWidth={3}></Spinner>\r\n    }\r\n    else {\r\n        if(props.uploadedImage && props.cartoonizedImage) {\r\n            pageContent = (\r\n                <section className={classes.ImageContainer}>\r\n                    <img src={props.uploadedImage || \"\"} alt=\"Uploaded_image\" className={classes.Image} />\r\n                    <img src={props.cartoonizedImage || \"\"} alt=\"Cartoonized_image\" className={classes.Image} />\r\n                </section>\r\n            );\r\n        }\r\n        else {\r\n            pageContent = (\r\n                <section className={classes.ImageContainer}>\r\n                    <p style={{textAlign: \"center\"}}>Drag and drop / Select the image you want to cartoonize!</p>\r\n                </section>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {pageContent}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ShowCase;\r\n","import React from 'react';\r\n\r\nimport classes from './Button.module.scss';\r\n\r\nconst Button = (props) => {\r\n    let classList = [classes.Button, classes.ButtonMedium, classes.ButtonPrimary];\r\n\r\n    switch(props.type) {\r\n        case 'ButtonSmall':\r\n            classList = [classes.Button, classes.ButtonSmall, classes.ButtonPrimary];\r\n            break;\r\n        case 'ButtonMedium':\r\n            classList = [classes.Button, classes.ButtonMedium, classes.ButtonPrimary];\r\n            break;\r\n        default:\r\n            classList = [classes.Button, classes.ButtonMedium, classes.ButtonPrimary];\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <button className={classList.join(' ')} onClick={props.clicked}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { useRef } from 'react';\r\n\r\nimport classes from './File.module.scss';\r\nimport Button from '../UI/Button/Button';\r\n\r\nconst File = (props) => {\r\n\r\n    const fileInput = useRef();\r\n\r\n    const onFileSelected = (event) => {\r\n        props.selectedFile(event.target.files[0]);\r\n    }\r\n\r\n    if(props.droppedFile) {\r\n        fileInput.current.files = props.droppedFile;\r\n    }\r\n\r\n    const openFilePicker = (e) => {\r\n        e.preventDefault();\r\n        fileInput.current.click();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" name=\"image\" id=\"image\" onChange={onFileSelected} ref={fileInput} className={classes.Input}></input>\r\n            <Button clicked={openFilePicker} type=\"ButtonSmall\">Select Image</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default File;","import React, { Component, createRef } from 'react';\r\n\r\nimport classes from './DragAndDrop.module.scss';\r\nimport File from '../../components/Upload/File';\r\n\r\nconst MIME_TYPE_MAP = {\r\n    \"image/png\": \"png\",\r\n    \"image/jpeg\": \"jpeg\",\r\n    \"image/jpg\": \"jpg\"\r\n};\r\n\r\nclass DragAndDrop extends Component {\r\n\r\n    dropRef = createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            classList: [classes.DropContainer],\r\n            content: 'DRAG YOUR FILE HERE (.png, .jpeg, jpg)',\r\n            contentClassList: [classes.ContentText],\r\n            dataTransferFiles: undefined,\r\n            selectedFileName: undefined\r\n        };\r\n\r\n        this.dragCounter = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        let div = this.dropRef.current;\r\n        div.addEventListener('dragenter', this.dragInHandler);\r\n        div.addEventListener('dragleave', this.dragOutHandler);\r\n        div.addEventListener('dragover', this.dragOverHandler);\r\n        div.addEventListener('drop', this.dropHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        let div = this.dropRef.current;\r\n        div.removeEventListener('dragenter', this.dragInHandler);\r\n        div.removeEventListener('dragleave', this.dragOutHandler);\r\n        div.removeEventListener('dragover', this.dragOverHandler);\r\n        div.removeEventListener('drop', this.dropHandler);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.file !== this.props.file && (prevProps.file !== undefined && this.props.file === undefined)) {\r\n            this.resetState();\r\n        }\r\n\r\n        return ((prevProps.file !== this.props.file) && (prevProps.file !== undefined && this.props.file === undefined));\r\n    }\r\n\r\n    checkMimeType = (file) => {\r\n        return MIME_TYPE_MAP[file];\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState({\r\n            classList: [classes.DropContainer],\r\n            content: 'DRAG YOUR FILE HERE (.png, .jpeg, jpg)',\r\n            contentClassList: [classes.ContentText],\r\n            dataTransferFiles: undefined,\r\n            selectedFileName: undefined\r\n        });\r\n    }\r\n\r\n    dragInHandler = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        this.dragCounter++;\r\n\r\n        this.setState((prevState) => {\r\n            return {\r\n                classList: prevState.classList.concat(classes.DropContainerEnter)\r\n            };\r\n        });\r\n\r\n        if (event.dataTransfer.items && event.dataTransfer.items.length > 0) {\r\n            let isValid = this.checkMimeType(event.dataTransfer.items[0].type);\r\n            if(isValid) {\r\n                let newList = [classes.ContentText, classes.ValidFileType];\r\n                this.setState(prevState => {\r\n                    return {\r\n                        content: 'DROP YOUR FILE HERE',\r\n                        contentClassList: newList\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                let newList = [classes.ContentText, classes.InvalidFileType];\r\n                this.setState(prevState => {\r\n                    return {\r\n                        content: 'INVALID FILE TYPE!',\r\n                        contentClassList: newList\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    dragOutHandler = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        this.dragCounter--;\r\n        if(this.dragCounter > 0) {\r\n            return;\r\n        }\r\n\r\n        this.setState((prevState) => {\r\n            return {\r\n                classList: prevState.classList.filter(c => c !== classes.DropContainerEnter)\r\n            };\r\n        });\r\n\r\n        if(this.state.selectedFileName === undefined || this.state.selectedFileName === '') {\r\n            let newList = [classes.ContentText];\r\n            this.setState({\r\n                content: 'DRAG YOUR FILE HERE (.png, .jpeg, jpg)',\r\n                contentClassList: newList\r\n            });\r\n        }\r\n        else {\r\n            let newList = [classes.ContentText, classes.ValidFileType];\r\n            this.setState(prevState => {\r\n                return {\r\n                    classList: [classes.DropContainer, classes.DropContainerEnter],\r\n                    content: `Selected file: ${this.state.selectedFileName}`,\r\n                    contentClassList: newList\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    dragOverHandler = (event) => {\r\n        // To prevent the file from opening\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    dropHandler = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.dataTransfer.items && event.dataTransfer.items.length > 0) {\r\n            if(this.checkMimeType(event.dataTransfer.items[0].type)) {\r\n                this.props.dropHandle(event.dataTransfer.files[0]);\r\n                this.dragCounter = 0;\r\n\r\n                let name = event.dataTransfer.files[0].name;\r\n\r\n                this.setState({\r\n                    classList: [classes.DropContainer, classes.DropContainerEnter],\r\n                    dataTransferFiles: event.dataTransfer.files,\r\n                    selectedFileName: name,\r\n                    content: `Selected file: ${name}`\r\n                });\r\n            }\r\n            else {\r\n                if(!this.props.file) {\r\n                    this.props.dropHandle(undefined);\r\n                    this.resetState();\r\n                }\r\n                else {\r\n                    if(this.state.selectedFileName !== undefined || this.state.selectedFileName !== '') {\r\n                        this.setState((prevState) => {\r\n                            let fileName = prevState.selectedFileName;\r\n                            return {\r\n                                classList: [classes.DropContainer, classes.DropContainerEnter],\r\n                                content: `Selected file: ${fileName}`,\r\n                                contentClassList: [classes.ContentText, classes.ValidFileType],\r\n                                dataTransferFiles: prevState.dataTransferFiles,\r\n                                selectedFileName: fileName\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fileSelectHandler = (file) => {\r\n        // Validate the file first\r\n        if(!this.checkMimeType(file.type)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            classList: [classes.DropContainer, classes.DropContainerEnter],\r\n            selectedFileName: file.name,\r\n            content: `Selected file: ${file.name}`,\r\n            contentClassList: [classes.ContentText, classes.ValidFileType]\r\n        });\r\n\r\n        this.props.fileSelect(file);\r\n    }\r\n\r\n    render() {\r\n        let pageContentTemplate = <p className={this.state.contentClassList.join(' ')}>{this.state.content}</p>\r\n\r\n        return(\r\n            <div className={this.state.classList.join(' ')} ref={this.dropRef}>\r\n                {pageContentTemplate}\r\n                <div className={classes.FileSelect}>\r\n                    <File selectedFile={this.fileSelectHandler} droppedFile={this.state.dataTransferFiles} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DragAndDrop;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport classes from './FileUpload.module.scss';\r\nimport Button from '../UI/Button/Button';\r\nimport DragAndDrop from '../../containers/DragAndDrop/DragAndDrop';\r\n\r\n// const BACKEND_URL = \"http://berkaysenkoylu.pythonanywhere.com\";\r\nconst BACKEND_URL = \"https://nameless-river-41426.herokuapp.com\";\r\n\r\nconst FileUpload = (props) => {\r\n    const [file, setFile] = useState(undefined);\r\n\r\n    const onSelectFile = (input_file) => {\r\n        setFile(input_file);\r\n    }\r\n\r\n    const onFormSubmitted = (event) => {\r\n        event.preventDefault();\r\n\r\n        const config = {\r\n            headers: {\r\n              'content-type': 'multipart/form-data'\r\n            }\r\n          };\r\n\r\n          props.loading(true);\r\n      \r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n\r\n          axios.post(BACKEND_URL + '/file-upload', formData, config).then(response => {\r\n            return response.data;\r\n          }).then(data => {\r\n            if(data.status !== 201) {\r\n                props.loading(false);\r\n                \r\n                // console.log(\"Show error message\");\r\n                // console.log(data.status);\r\n                // TODO\r\n                props.error(data.message);\r\n\r\n                return;\r\n            }\r\n            props.cartoonizeImage(BACKEND_URL + data.path, BACKEND_URL + data.cartoon_path);\r\n\r\n            props.loading(false);\r\n            setFile(undefined);\r\n          }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <section className={classes.FileUpload}>\r\n            <header className={classes.FileUploadHeader}>\r\n                <h2>File Upload</h2>\r\n            </header>\r\n            \r\n            <form onSubmit={onFormSubmitted} className={classes.Form}>\r\n                <DragAndDrop dropHandle={onSelectFile} file={file} fileSelect={onSelectFile} />\r\n                <Button>Cartoonize</Button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default FileUpload;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport classes from './Backdrop.module.scss';\r\n\r\nconst Backdrop = (props) => \r\n    ReactDOM.createPortal(\r\n        props.show ? <div className={classes.Backdrop}/> : null,\r\n        document.getElementById('backdrop-root')\r\n    );\r\n\r\nexport default Backdrop;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport classes from './ErrorDialogue.module.scss';\r\nimport Backdrop from '../UI/Backdrop/Backdrop';\r\n\r\nconst ErrorDialogue = (props) => {\r\n\r\n    return (\r\n        ReactDOM.createPortal(\r\n            props.show ? (<div className={classes.ErrorDialogueContainer}>\r\n                <Backdrop show={props.show} />\r\n                <div className={classes.ErrorDialogue}>\r\n                    <p>{props.errorMessage || \"Something went wrong\"}</p>\r\n                    <div className={classes.ErrorDialogueCallToAction}>\r\n                        <button onClick={props.closed}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>) : null,\r\n            document.getElementById('error-root')\r\n        )\r\n    );\r\n}  \r\n\r\nexport default ErrorDialogue;","import React, { useState } from 'react';\n\nimport classes from './App.module.scss';\nimport ShowCase from './components/ShowCase/ShowCase';\nimport FileUpload from './components/FileUpload/FileUpload';\nimport ErrorDialogue from './components/ErrorDialogue/ErrorDialogue';\n// import DragAndDrop from './components/DragAndDrop/DragAndDrop';\n\nconst App = () => {\n  // const [file, setFile] = useState(undefined);\n  const [handleError, setHandleError] = useState({\n    show: false,\n    message: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [uploadedImage, setUploadedImage] = useState(undefined);\n  const [showcase, setShowcase] = useState(\"\");\n  \n  // const onSelectFile = (input_file) => {\n  //   setFile(input_file);\n  // }\n\n  // const onFormSubmitted = (event) => {\n  //   event.preventDefault();\n\n  //   const config = {\n  //     headers: {\n  //       'content-type': 'multipart/form-data'\n  //     }\n  //   };\n\n  //   const formData = new FormData();\n  //   formData.append('file', file);\n\n  //   axios.post(BACKEND_URL + '/file-upload', formData, config).then(response => {\n  //     return response.data;\n  //   }).then(data => {\n  //     setUploadedImage(BACKEND_URL + data.path);\n  //     setShowcase(BACKEND_URL + data.cartoon_path);\n  //     setFile(undefined);\n  //   }).catch(error => console.log(error));\n  // }\n\n  const onErrorOccuredHandler = (message) => {\n    setHandleError({\n      show: true,\n      message: message\n    });\n  }\n\n  const cartoonizeImageHandler = (uploadedImage, cartoonizedImage) => {\n    setUploadedImage(uploadedImage);\n    setShowcase(cartoonizedImage);\n  }\n\n  const closeErrorDialogueHandler = () => {\n    setHandleError({\n      show: false,\n      message: \"\"\n    });\n  }\n\n  return (\n    <>\n      <ErrorDialogue show={handleError.show} errorMessage={handleError.message} closed={closeErrorDialogueHandler}></ErrorDialogue>\n      <main className={classes.App}>\n        <header className={classes.AppHeader}>\n          <h1>CARTOONIZER</h1>\n        </header>\n        <ShowCase uploadedImage={uploadedImage} cartoonizedImage={showcase} loading={isLoading} />\n\n        <FileUpload cartoonizeImage={cartoonizeImageHandler} loading={(isLoading) => setIsLoading(isLoading)} error={onErrorOccuredHandler} />\n        {/* <form onSubmit={onFormSubmitted}>\n          <h2>File Upload</h2>\n          <DragAndDrop dropHandle={onSelectFile} file={file} fileSelect={onSelectFile} />\n          <button>Upload</button>\n        </form> */}\n      </main>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageContainer\":\"ShowCase_ImageContainer__2t0D8\",\"Image\":\"ShowCase_Image__3lM2y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__uzz_n\",\"Circular\":\"Spinner_Circular__3ahUC\",\"rotate\":\"Spinner_rotate__3gNk0\",\"Stroke\":\"Spinner_Stroke__Z49yY\",\"dash\":\"Spinner_dash__t7223\",\"color\":\"Spinner_color__UbC79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FileUpload\":\"FileUpload_FileUpload__EQNX8\",\"FileUploadHeader\":\"FileUpload_FileUploadHeader__2Q5jl\",\"Form\":\"FileUpload_Form__12Z8g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorDialogueContainer\":\"ErrorDialogue_ErrorDialogueContainer__1HhSd\",\"ErrorDialogue\":\"ErrorDialogue_ErrorDialogue__16brN\",\"ErrorDialogueCallToAction\":\"ErrorDialogue_ErrorDialogueCallToAction__2Y-wr\"};"],"sourceRoot":""}